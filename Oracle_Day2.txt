--Create table 
create table person(
name varchar2(50) not null,
age int
);

--getting table details
desc person;

--To get list of tables available in a database
select * from tab

select * from Person;

--Insert data in to Table

insert into person(name,age) values('Abc',10);
insert into person(name,age) values('Qrt',11)
insert into person(name,age) values('Xy',10)
insert into person(name,age) values('Mno',10)

insert into person(age,name) values(20,'BC')

insert into person values('Mno',100)

insert into person(name) values('Course F')

insert into person(age) values(99)

-Primary Key--
--ONE PER TABLE
-- NOT ALLOW NULL
-- UNIQUE VALUES

RollNum int -pk
StdName varchar2(50)
Age int 



CREATE TABLE STUDENT(
ROLLNUM INT NOT NULL PRIMARY KEY,
STD_NAME VARCHAR2(50) NOT NULL,
AGE INT
)

CREATE TABLE STUDENT(
ROLLNUM INT NOT NULL,
STD_NAME VARCHAR2(50) NOT NULL,
AGE INT,
CONSTRAINT PK1 PRIMARY KEY(ROLLNUM) 
)

DROP TABLE STUDENT
DESC STUDENT
SELECT * FROM STUDENT
INSERT INTO STUDENT VALUES(2,'DEF',11);
INSERT INTO STUDENT VALUES(null,'pqr',12);

--ORA-00001: unique constraint (TEST.SYS_C007126) violated
--ORA-00001: unique constraint (TEST.PK1) violated
--ORA-01400: cannot insert NULL into ("TEST"."STUDENT"."ROLLNUM")

--http://www.oracle.com/pls/db92/db92.error_search?prefill=ORA-

--unique key
--NULL(IN CASE OF COMPOSITE IT WILL NOT ALLOW) OR UNIQ NUMBER/VAUES
--MORE NUMBER OF UNIQUE PER TABLE

CREATE TABLE ADDRESS1(
ADDRID INT NOT NULL UNIQUE,
CITY_NAME VARCHAR2(50) NOT NULL,
POSTALCODE INT
)

DROP TABLE ADDRESS1

CREATE TABLE ADDRESS1(
ADDRID INT NOT NULL,
CITY_NAME VARCHAR2(50) NOT NULL,
POSTALCODE INT,
CONSTRAINT UQ1 UNIQUE(ADDRID)
)

CREATE TABLE ADDRESS2(
ADDRID INT NOT NULL,
CITY_NAME VARCHAR2(50) NOT NULL,
POSTALCODE INT,
CONSTRAINT UQ1 UNIQUE(ADDRID,CITY_NAME)
)

DESC ADDRESS1
SELECT * FROM ADDRESS1

INSERT INTO ADDRESS1 VALUES(100,'BANGALORE',560011);
INSERT INTO ADDRESS1 VALUES(101,'BANGALORE',560011);

INSERT INTO ADDRESS2 VALUES(101,'BANGALORE1',560011);
INSERT INTO ADDRESS2 VALUES(101,'BANGALORE1',560011);

SELECT * FROM ADDRESS2

--ORA-00001: unique constraint (TEST.UQ1) violated

--Foregin Key
select * from tab

PERSON TABLE -  
PERSON1 TABLE -  
PERSON2 TABLE -  
STUDENT TABLE -  

desc PERSON1 
select * from PERSON1 

insert into person1 values(101,'Lory');
create table Address_new(
p_id int not null,
city varchar2(100) not null,
country varchar2(100) not null,
foreign key(p_id) references person1(id))

insert into Address_new values(101,'Bangalore','India');


select * from Address_new

--check(col>90)

create table testperosn(age int not null check(age>20),name varchar2(100));

drop table testperosn

insert into testperosn values(21,'Abc');
select * from testperosn

--default

create table testperosn(age int not null check(age>20),name varchar2(100),country varchar2(100) default 'India');
insert into testperosn(age,name) values(21,'Abc');
insert into testperosn(age,name,country) values(22,'Pqr','us');
insert into testperosn values(23,'Xyz','uk');

--



select * from tab
select * from DEMO_CUSTOMERS


-- Create table as
create table new_demo_cust as select CUSTOMER_ID,CUST_FIRST_NAME,CUST_LAST_NAME from DEMO_CUSTOMERS
select * from new_demo_cust 

--Select 
select * from DEMO_CUSTOMERS
select CUSTOMER_ID,CUST_FIRST_NAME,CUST_LAST_NAME from DEMO_CUSTOMERS
--disctict

select distinct(customer_id) from DEMO_ORDERS
select * from DEMO_ORDERS

--where
select * from DEMO_ORDERS where ORDER_TOTAL>1000 or CUSTOMER_ID <5

--order by  asc/desc
select * from DEMO_ORDERS order by ORDER_TOTAL desc

--like 
select * from DEMO_customers where CUST_FIRST_NAME like '%n'
select * from DEMO_customers where CUST_FIRST_NAME like '%ar%'

--in
select * from DEMO_customers where CUST_STATE in ('NY','VA');
--between

select * from DEMO_ORDERS where ORDER_TOTAL between 1100 and 1900


select * from tab;
--Oracle classes
--1.order by

select * from DEMO_CUSTOMERS order by CUST_STATE  --Asc
select * from DEMO_CUSTOMERS order by CUST_STATE asc
select * from DEMO_CUSTOMERS order by CUST_STATE desc

--count(),
select * from DEMO_ORDERS 
select count(*) from DEMO_ORDERS where CUSTOMER_ID=7

--sum()
select sum(ORDER_TOTAL) from DEMO_ORDERS where CUSTOMER_ID=7

--2.group by
select CUSTOMER_ID ,sum(ORDER_TOTAL) from DEMO_ORDERS group by CUSTOMER_ID
select DEPTNO,sum(SAL) from emp group by DEPTNO    

--3.having,4.from
select CUSTOMER_ID ,sum(ORDER_TOTAL) from DEMO_ORDERS group by CUSTOMER_ID having sum(ORDER_TOTAL)>1000
select CUSTOMER_ID ,avg(ORDER_TOTAL) from DEMO_ORDERS group by CUSTOMER_ID having sum(ORDER_TOTAL)>1000
select CUSTOMER_ID ,sum(ORDER_TOTAL) from DEMO_ORDERS where order_id not in(7,8) group by CUSTOMER_ID having sum(ORDER_TOTAL)>1000

select DEPTNO,sum(SAL) from emp group by DEPTNO  having sum(sal)>9000
--5.distinct
select * from emp
select distinct(job) from emp
select distinct(deptno) from emp

select * from EMP 



--sequence in Oracle
CREATE SEQUENCE MYSEQ START WITH 1000 
                            INCREMENT BY 5
                            MINVALUE 1000
                            MAXVALUE 10000;

CREATE TABLE STUDENT_1(ID INT,NAME VARCHAR2(100))

INSERT INTO STUDENT_1 VALUES(MYSEQ.NEXTVAL,'XYZ');
INSERT INTO STUDENT_1 VALUES(MYSEQ.NEXTVAL,'ABC');
INSERT INTO STUDENT_1 VALUES(MYSEQ.NEXTVAL,'PQR');
INSERT INTO STUDENT_1 VALUES(MYSEQ.NEXTVAL,'MONO','ZPH');
INSERT INTO STUDENT_1 VALUES(MYSEQ.NEXTVAL,'ASDF','TYU');
INSERT INTO STUDENT_1(ID,NAME) VALUES(MYSEQ.NEXTVAL,'ASDF');

SELECT * FROM STUDENT_1

ALTER SEQUENCE MYSEQ INCREMENT BY 2

--Alter table
--Add New Column
ALTER TABLE STUDENT_1 ADD SCHOOL VARCHAR2(100) 
ALTER TABLE STUDENT_1 ADD SCHOOL VARCHAR2(100) NOT NULL
ALTER TABLE STUDENT_1 ADD SCHOOL VARCHAR2(100) DEFAULT 'ZPH'
ALTER TABLE STUDENT_1 ADD SCHOOL VARCHAR2(100) DEFAULT 'ZPH' NOT NULL
ALTER TABLE STUDENT_1 DROP COLUMN SCHOOL

